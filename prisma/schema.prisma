// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean  @default(false)
  image            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)

  sessions Session[]
  accounts Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  impersonatedBy String?

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

// model Family {
//   id       String   @id @default(cuid())
//   name     String
//   address  String?
//   createdAt DateTime @default(now())

//   // Relationships
//   // parents  Parent[]
//   children Child[]
// }

// model Child {
//   id        String   @id @default(cuid())
//   name      String
//   age       Int
//   school    String
//   grade     String
//   createdAt DateTime @default(now())

//   // Foreign Key
//   familyId  String
//   family    Family   @relation(fields: [familyId], references: [id])
// }

